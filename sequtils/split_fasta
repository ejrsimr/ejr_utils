#!/usr/bin/env python3
# ejr: 2023-03-12
# lmd: 2023-03-12
# Split FASTA into multiple pieces

import argparse
import signal
import math
import itertools
import re

def main():
    args = get_args()
    fasta = read_fasta(args.f)
    split_fasta(fasta, args.n, args.f)

###############################################################################
### SPLIT FASTA into multiple parts
###############################################################################
def split_fasta(fasta, parts, infile):
    # get length of fasta
    num_seqs = len(fasta)
    part_size = math.ceil(num_seqs / parts)

    # number of zeros to pad file numbers with
    tens = math.floor(math.log10(parts)) + 1

    pos = 0
    for part_number in range(0, parts):
        fasta_part = dict(itertools.islice(fasta.items(), pos, pos + part_size))
        pos = pos + part_size
        # generate output file name from infile and part_number 
        outfile = re.sub(r"^(.+)\.(.+)$", r"\1_" + str(part_number).zfill(tens) + r".\2", infile)

        print_fasta(fasta_part, outfile)

###############################################################################
### Read FASTA filehandle into dictionary
###############################################################################
def read_fasta(filename):

    header = ""
    fasta = {}

    for line in open(filename, 'r'):
        line = line.rstrip()
        # starts with handles blank lines better than line[0]
        if (line.startswith(">")):
            header = line[1:]
            fasta[header] = []
        else:
            fasta[header].append(line)
    # append is more efficient that string concatenation
    for header in fasta:
        fasta[header] = ''.join(fasta[header])

    return fasta

###############################################################################
### Add newlines every 80 characters for FASTA formatting
###############################################################################
def insert_newlines(string, every=80):
    lines = []

    for i in range(0, len(string), every):
        lines.append(string[i:i+every])

    return '\n'.join(lines)

###############################################################################
# Print FASTA Dictionary as FASTA to STDOUT
###############################################################################
def print_fasta(fasta, outfile):
    with open(outfile, 'w') as f:
        for header in fasta:
            print(">", header, sep="", file=f)
            print(insert_newlines(fasta[header]), file=f)

###############################################################################
### Get command-line arguments using argparse
###############################################################################
def get_args():
    parser = argparse.ArgumentParser(description="Split FASTA file into n pieces")
    # file defaults to stdin
    parser.add_argument('-f', type = str, help = 'Input FASTA')
    parser.add_argument('-n', type = int, default = '16', help = 'Number of pieces')
    args = parser.parse_args()

    return args

###############################################################################
# Run MAIN
###############################################################################
if __name__ == "__main__":
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    main()
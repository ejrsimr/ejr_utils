#!/usr/bin/env python3
# ejr: 2023-02-22
# lmd: 2023-02-22
# General purpose fasta manipulation suite

import os
import sys
import re
from re import finditer
import argparse
import fileinput
import signal

def main():
    get_args()
    
###############################################################################
### Printout FASTA Statistics
###############################################################################
def fasta_stats(args):

    fasta = read_fasta(args.file)

    num_bases = 0
    num_seqs = 0 
    total_gc = 0
    total_at = 0
    total_n = 0
    longest_seq = 0
    shortest_seq = 1000000000
    seq_lengths = []

    for value in fasta.values():
        seq = value.upper()
        slen = len(seq)
        seq_lengths.append(slen)
        g_count = seq.count('G')
        c_count = seq.count('C')
        a_count = seq.count('A')
        t_count = seq.count('T')
        n_count = seq.count('N')
        gc_count = g_count + c_count
        at_count = a_count + t_count
        # add lengths together for number of bases
        num_bases += slen
        # count number of sequences
        num_seqs += 1
        # track total number of bases of each type
        total_gc += gc_count
        total_at += at_count
        total_n += n_count
        # track longest and shortest sequence
        if slen < shortest_seq:
            shortest_seq = slen
        if slen > longest_seq:
            longest_seq = slen

    average_length = float(num_bases) / float(num_seqs)
    percent_gc = float(total_gc) / (float(total_gc) + float(total_at))
    percent_n = float(total_n) / float(num_bases)
    sorted_lengths = sorted(seq_lengths, reverse=True)
    fifty = float(num_bases * .5)
    ninety = float(num_bases *.9)

    running_total = 0
    n50 = 0
    n90 = 0
    for length in sorted_lengths:
        running_total += length
        if running_total < fifty:
            n50 = length
        if running_total < ninety:
            n90 = length

    # Average is a floating point number, convert to integer
    average_length = int(round(average_length, 0))

    output = """
|                      |            |
|:-------------------- |-----------:|
| Number of Sequences: | {: >10,} |
| Total Length:        | {: >10,} |
| Average Length:      | {: >10,} |
| Longest Sequence:    | {: >10,} |
| Shortest Sequence:   | {: >10,} |
| Percent GC:          | {: >10.0%} |
| Percent N:           | {: >10.0%} |
| N50:                 | {: >10,} |
| N90:                 | {: >10,} |
"""
    print(output.format(
    num_seqs,
    num_bases,
    average_length,
    longest_seq,
    shortest_seq,
    percent_gc,
    percent_n,
    n50,
    n90))

###############################################################################
### Read FASTA filehandle into dictionary
###############################################################################
def read_fasta(fh):
    header = ""
    fasta = {}

    for line in fh:
        line = line.rstrip()
        # starts with handles blank lines better than line[0]
        if (line.startswith(">")):
            header = line[1:]
            fasta[header] = []
        else:
            fasta[header].append(line)
    # append is more efficient that string concatenation
    for header in fasta:
        fasta[header] = ''.join(fasta[header])

    return fasta

###############################################################################
### Add newlines every 80 characters for FASTA formatting
###############################################################################
def insert_newlines(string, every=80):
    lines = []

    for i in range(0, len(string), every):
        lines.append(string[i:i+every])

    return '\n'.join(lines)

###############################################################################
# Reverse Complement Sequence
###############################################################################
def reverse_complement(seq):
    # complement sequence
    bases = str.maketrans('AGCTagct','TCGAtcga')
    # reverse sequences; return
    return seq.translate(bases)[::-1]

###############################################################################
# Print FASTA Dictionary as FASTA to STDOUT
###############################################################################
def print_fasta(fasta):
    for header in fasta:
        print(">", header, sep="")
        print(insert_newlines(fasta[header]))

###############################################################################
# calculate GC content of sequence - returns percentage in decimal (e.g. 0.21)
###############################################################################    
def calc_gc(seq):
    useq = seq.upper()
    g = useq.count('G')
    c = useq.count('C')
    a = useq.count('A')
    t = useq.count('T')
    if g + c + a + t > 0: 
        perc_gc = (g + c) / (g + c + a + t)
    else:
        perc_gc = 0
    return(perc_gc)

###############################################################################
# Print table of GC content
###############################################################################
def print_gc_table(fasta):
    print("seq_id\tseq_gc")

    for header in fasta:
        gc = calc_gc(fasta[header]) * 100 
        print(header, "\t%0.2f" % gc)

###############################################################################
### Get command-line arguments using argparse
###############################################################################
def get_args():
    parser = argparse.ArgumentParser(description="Manipulate FASTA Files")
    subparsers = parser.add_subparsers(help='sub-command help', required=True)

    # create the parser for the "stats" command
    parser_stats = subparsers.add_parser('stats', help='stats help')
    parser_stats.add_argument('--file', type = argparse.FileType('r'), default = sys.stdin, 
        help = 'Input FASTA - defaults to STDIN')
    parser_stats.set_defaults(func=fasta_stats)

    # create the parser for the "filter" command
    parser_filter = subparsers.add_parser('filter', help='filter help')
    parser_filter.add_argument('--len_min', type = int, default = '0',
        help = 'Minimum sequence length to retain')
    parser_filter.add_argument('--len_max', type = int, default = '10000000',
        help = 'Maximum sequence length to retain')
    parser_filter.add_argument('--gc_min', type = int, default = '0',
        help = 'Minimum sequence GC percentage to retain (20 = .20)')
    parser_filter.add_argument('--gc_max', type = int, default = '100',
        help = 'Maximum sequence GC percentage to retain (60 = .60)')
#    parser_filter.set_defaults(func=filter_fasta)

    # create the parser for the "table" command
    parser_table = subparsers.add_parser('table', help='table help')
    table_group = parser_table.add_mutually_exclusive_group()
    table_group.add_argument('--gc',  help = 'Output Table of GC Content', action="store_true")
    table_group.add_argument('--len', help = 'Output Table of Sequence Length', action="store_true")
    table_group.add_argument('--seq', help = 'Output Table of Sequences', action="store_true")
#    parser_table.set_defaults(func=fasta2table)

    # create the parser for the "histogram" command
    parser_hist = subparsers.add_parser('histogram', help='histogram help')
    hist_group = parser_hist.add_mutually_exclusive_group()
    hist_group.add_argument('--gc',  help = 'Output Table of GC Content', action="store_true")
    hist_group.add_argument('--len', help = 'Output Table of Sequence Length', action="store_true")
#    parser_hist.set_defaults(func=fasta2histogram)

    args = parser.parse_args()
    args.func(args)
    return args

###############################################################################
# Run MAIN
###############################################################################
if __name__ == "__main__":
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    main()
